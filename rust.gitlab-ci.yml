stages:
    - docker
    - check
    - build
    - test
    - release

workflow:
    rules:
        -   if: $CI_PIPELINE_SOURCE != 'push' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
            when: always
        -   when: never

.rust-default:
    image: registry.gitlab.com/tobip64/rust-gitlab-ci:latest
    cache:
        -   key: $CI_COMMIT_REF
            paths: [ target/ ]
        -   key: cargo
            paths: [ cargo/ ]
    interruptible: true
    timeout: 30m
    variables:
        CARGO_HOME: $CI_PROJECT_DIR/cargo
        CACHE_FALLBACK_KEY: $CI_DEFAULT_BRANCH
    parallel:
        matrix:
            -   CHANNEL: [ stable, beta, nightly ]
    rules:
        -   if: $CHANNEL == "stable"
            allow_failure: false
        -   allow_failure: true
    before_script:
        - rustup --version && rustc --version && cargo --version && echo $RUSTFLAGS && echo $CARGO_OPTS

check:clippy:
    extends: .rust-default
    stage: check
    script:
        - 'cargo +$CHANNEL clippy
            --color always
            --verbose
            --all-targets
            --all-features
            --message-format=json
            $CARGO_OPTS
            | gitlab-report -p clippy > gl-code-quality-report.json'
    artifacts:
        when: always
        reports:
            codequality: gl-code-quality-report.json

check:fmt:
    extends: .rust-default
    stage: check
    parallel:
    rules:
        -   if: $RUN_RUST_FMT
    script:
        - cargo +stable fmt $CARGO_OPTS -- --check
    allow_failure: true

check:audit:
    extends: .rust-default
    stage: check
    parallel:
    script:
        - cargo audit --color=always --json $CARGO_OPTS | gitlab-report -p audit -f gl-sast > gl-sast-report.json
    artifacts:
        when: always
        reports:
            sast: gl-sast-report.json

check:geiger:
    extends: .rust-default
    stage: check
    parallel:
    script:
        - cargo geiger --all-dependencies --color always --output-format Json $CARGO_OPTS | gitlab-report -p geiger -f gl-sast > gl-sast-report.json
    artifacts:
        when: always
        reports:
            sast: gl-sast-report.json

build:
    extends: .rust-default
    stage: build
    needs: [ "check:clippy" ]
    timeout: 1h
    parallel:
        matrix:
            -   CHANNEL: [ stable, beta, nightly ]
                PROFILE: [ debug, release ]
                TARGET:
                    - x86_64-unknown-linux-musl
                    - aarch64-unknown-linux-musl
                    - mips64el-unknown-linux-muslabi64
                    - wasm32-wasi
    script:
        - '[[ $CHANNEL == "nightly" ]] && export RUSTFLAGS="$RUSTFLAGS -Zinstrument-coverage" || true'
        - 'cargo +$CHANNEL build
            --verbose
            --color always
            --workspace
            --all-targets
            --all-features
            --target $TARGET
            $([[ $PROFILE == "release" ]] && echo "--release" || echo "")
            $CARGO_OPTS'
    artifacts:
        paths:
            - target/$TARGET/$PROFILE/*
            - Dockerfile

# requires nightly
.build:multiarch:
    extends: .rust-default
    stage: build
    needs: [ "check:clippy" ]
    timeout: 1h
    parallel:
            matrix:
                -   CHANNEL: [ nightly ]
                    PROFILE: [ debug, release ]
    script:
        - export RUSTFLAGS="$RUSTFLAGS -Zinstrument-coverage"
        - 'cargo +$CHANNEL build
            --verbose
            --color=always
            --workspace
            --all-targets
            --all-features
            $([[ $PROFILE == "release" ]] && echo "--release" || echo "")
            --target x86_64-unknown-linux-musl
            --target powerpc64le-unknown-linux-musl
            --target aarch64-unknown-linux-musl
            --target riscv64gc-unknown-linux-musl
            --target wasm32-wasi
            -Z multitarget
            -Z build-std
            $CARGO_OPTS'
    artifacts:
        paths:
            - target/*/$PROFILE/*
            - Dockerfile

build:docs:
    extends: .rust-default
    stage: build
    needs: [ "check:clippy" ]
    parallel:
    script:
        - cargo +stable doc --color=always --verbose --no-deps $CARGO_OPTS
    artifacts:
        paths:
            - target/doc

test:test:
    extends: .rust-default
    stage: test
    needs: [ build ]
    script:
        - 'LLVM_PROFILE_FILE="$CI_PROJECT_NAME-%p-%m.profraw" cargo +$CHANNEL test
            --verbose
            --color always
            --workspace
            --all-targets
            --all-features
            --no-fail-fast
            --
            -Z unstable-options
            --format json
            $CARGO_OPTS
            | gitlab-report -p test > results.xml'
    after_script:
        - 'grcov .
            --binary-path ./target/x86_64-unknown-linux-musl/debug/
            --source-dir .
            --output-type cobertura
            --output-path coverage.xml
            --branch
            --ignore-not-existing
            --ignore "/*"'
        - mkdir results/
        - cp results.xml results/results.xml
        - allure generate -c results/
    artifacts:
        when: always
        paths:
            - allure-report/
        reports:
            junit: results.xml
            cobertura: coverage.xml

test:bench:
    extends: .rust-default
    stage: test
    needs: [ build ]
    script:
        - 'cargo +$CHANNEL bench
            --verbose
            --color always
            --workspace
            --all-targets
            --all-features
            $CARGO_OPTS
            --
            -Z unstable-options
            --format json
            | gitlab-report -p bench > metrics.txt'
    artifacts:
        when: always
        reports:
            metrics: metrics.txt

.test:test-e2e:
    extends: .rust-default
    stage: test
    needs: [ build ]
    script:
        - echo test
    artifacts:
        reports:
            junit: results.xml

.test:bench-e2e:
    extends: .rust-default
    stage: test
    needs: [ build ]
    script:
        - echo bench
    artifacts:
        reports:
            junit: metrics.txt

release:registry:
    stage: release
    image: registry.gitlab.com/tobip64/rust-gitlab-ci:latest
    needs: [ "check:audit", "build", "test:test" ]
    timeout: 5m
    variables:
        GIT_STRATEGY: none
    script:
        - 'cd target
          && find . -mindepth 3 -maxdepth 3 -type f
          | tar -czv -T -
          | curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file . $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/$CI_COMMIT_REF_SLUG/$CI_COMMIT_SHA/package.tar.gz'

.release:docker:
    image: docker:20.10.6
    stage: release
    needs: [ "check:audit", "build", "test:test" ]
    services:
        -   name: docker:20.10.6-dind
            entrypoint: [ "env", "-u", "DOCKER_HOST" ]
            command: [ "dockerd-entrypoint.sh" ]
    variables:
        GIT_STRATEGY: none
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: ""
        DOCKER_PLATFORM: "linux/amd64,linux/arm64/v8"
    parallel:
        matrix:
            -   CHANNEL: [ stable, beta, nightly ]
                PROFILE: [ debug, release ]
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker buildx create --name builder
        - docker buildx use builder
        - 'docker buildx build
          -f Dockerfile
          --platform $DOCKER_PLATFORM
          --build-arg CHANNEL=$CHANNEL
          --build-arg PROFILE=$PROFILE
          --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA-$CHANNEL-$PROFILE
          --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CHANNEL-$PROFILE-latest
          .'
        - docker push --all-tags $CI_REGISTRY_IMAGE

release:pages:
    stage: release
    image: alpine:latest
    needs: [ "check:audit", "build:docs", "test:test" ]
    variables:
        GIT_STRATEGY: none
    rules:
        -   if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
    script:
        - mv target/doc public/
        - echo '<meta http-equiv="refresh" content="0; url={{ LIBRARY NAME }}">' > public/index.html
    artifacts:
        paths:
            - public/

release:gitlab:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    needs: [ "check:audit", "test:test" ]
    variables:
        GIT_STRATEGY: none
    rules:
        -   if: $CI_COMMIT_TAG
            when: manual
    script:
        - release-cli create
            --name $CI_COMMIT_TAG
            --description $CI_COMMIT_MESSAGE
            --tag-name $CI_COMMIT_TAG
            --ref $CI_COMMIT_SHA
            --assets-link '{"name":"Package","url":"${CI_REPOSITORY_URL}/packages/generic/${CI_COMMIT_REF_SLUG}/${CI_COMMIT_SHA}","link_type":"package"}'
            --assets-link '{"name":"Docker Image","url":"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA-stable-release","link_type":"image"}'
            --assets-link '{"name":"Docs","url":"$CI_PAGES_URL"}'
    release:
        name: $CI_COMMIT_TAG
        description: './CHANGELOG.md'
        tag_name: $CI_COMMIT_TAG
        ref: $CI_COMMIT_SHA

.release:crates:
    image: registry.gitlab.com/tobip64/rust-gitlab-ci:latest
    stage: release
    needs: [ "check:audit", "build", "test:test" ]
    rules:
        -   if: $CI_COMMIT_TAG
            when: manual
    before_script:
        - rustup --version && rustc --version && cargo --version && echo $RUSTFLAGS
    script:
        - cargo publish --registry $CARGO_REGISTRY --token $CARGO_REGISTRY_TOKEN $CARGO_OPTS
