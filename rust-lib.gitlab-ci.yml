stages:
    - check
    - build
    - release

workflow:
    rules:
        -   if: $CI_PIPELINE_SOURCE != 'push' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
            when: always
        -   when: never

.rust-default:
    image: registry.gitlab.com/tobip64/rust-gitlab-ci:latest
    cache:
        -   key: $CI_COMMIT_REF
            paths: [ target/ ]
        -   key: cargo
            paths: [ cargo/ ]
    interruptible: true
    timeout: 30m
    variables:
        CARGO_HOME: $CI_PROJECT_DIR/cargo
    parallel:
        matrix:
            -   CHANNEL: [ +stable, +beta, +nightly ]
    rules:
        -   if: $CHANNEL == "+stable"
            allow_failure: false
        -   allow_failure: true
    before_script:
        - rustup --version && rustc --version && cargo --version && echo $RUSTFLAGS

check:test:
    extends: .rust-default
    stage: check
    script:
        - cargo $CHANNEL test --verbose --all-features --no-fail-fast -- -Z unstable-options --format json | gitlab-report -p test > results.xml
    after_script:
        - mkdir results/
        - cp results.xml results/results.xml
        - allure generate -c results/
    artifacts:
        when: always
        paths:
            - allure-report/
        reports:
            junit:
                - results.xml

check:bench:
    extends: .rust-default
    stage: check
    script:
        - cargo $CHANNEL bench --verbose -- -Z unstable-options --format json | gitlab-report -p bench > metrics.txt
    artifacts:
        when: always
        reports:
            metrics: metrics.txt

check:clippy:
    extends: .rust-default
    stage: check
    script:
        - cargo $CHANNEL clippy --verbose --all-targets --all-features --message-format=json | gitlab-report -p clippy > gl-code-quality-report.json
    artifacts:
        when: always
        reports:
            codequality: gl-code-quality-report.json

check:fmt:
    extends: .rust-default
    stage: check
    parallel:
    rules:
        -   if: $RUN_RUST_FMT
    script:
        - cargo +stable fmt -- --check
    allow_failure: true

check:audit:
    extends: .rust-default
    stage: check
    parallel:
    script:
        - cargo audit | gitlab-report -p audit > gl-sast-report.json
    artifacts:
        when: always
        reports:
            sast: gl-sast-report.json

build:docs:
    extends: .rust-default
    stage: build
    parallel:
    script:
        - cargo doc --no-deps
    artifacts:
        paths:
            - target/doc
    rules:
        -   if: $CI_COMMIT_TAG

release:pages:
    stage: release
    image: alpine:latest
    needs: [ "check:clippy", "check:test", "build:docs" ]
    variables:
        GIT_STRATEGY: none
    rules:
        -   if: $CI_COMMIT_TAG
    script:
        - mv target/doc public/
        - echo '<meta http-equiv="refresh" content="0; url={{ LIBRARY NAME }}">' > public/index.html
    artifacts:
        paths:
            - public/

release:gitlab:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    needs: [ "check:clippy", "check:test" ]
    variables:
        GIT_STRATEGY: none
    rules:
        -   if: $CI_COMMIT_TAG
            when: manual
    script:
        - release-cli create \
            --name $CI_COMMIT_TAG \
            --description $CI_COMMIT_MESSAGE \
            --tag-name $CI_COMMIT_TAG \
            --ref $CI_COMMIT_SHA
    release:
        name: $CI_COMMIT_TAG
        description: './CHANGELOG.md'
        tag_name: $CI_COMMIT_TAG
        ref: $CI_COMMIT_SHA

release:crates:
    image: registry.gitlab.com/tobip64/rust-gitlab-ci:latest
    stage: release
    needs: [ "check:clippy", "check:test" ]
    rules:
        -   if: $CI_COMMIT_TAG
            when: manual
    before_script:
        - rustup --version && rustc --version && cargo --version && echo $RUSTFLAGS
    script:
        - cargo publish --registry $CARGO_REGISTRY --token $CARGO_REGISTRY_TOKEN